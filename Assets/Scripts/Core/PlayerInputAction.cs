//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace FPS.Input
{
    public partial class @PlayerInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""PlayerInputAction"",
            ""id"": ""3eef5b82-2949-4234-8b43-a8f2859808f3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""eb00d46d-fb3d-4adc-a298-125ebb1d9c9c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f173be16-bc7c-4005-a7bd-6af5e8fc6630"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Value"",
                    ""id"": ""8c8fb8d4-2839-441b-bd0c-f17ac33cb7a4"",
                    ""expectedControlType"": ""Digital"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""bcc41c68-576b-458b-bebd-79d262117f2e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ViewChange"",
                    ""type"": ""Value"",
                    ""id"": ""697c18af-e103-4e38-b4ef-d9263c2d6429"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AnyKey"",
                    ""type"": ""Button"",
                    ""id"": ""f38dfda4-da06-417c-9034-29597bf5fe12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7873322d-39d0-4696-a062-d90920ad1eaf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c9be0168-319a-4d5c-a0db-24b5846de6d6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6a1759d4-f216-4133-a0e8-538d7fdd470f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""18befe0d-b94d-4185-a6f8-b07ffd679e66"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""67798c3e-a3fc-45ad-8e6c-d2844200f8f0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e7520c61-d83a-441d-8641-91315a3523d2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69af8bc9-4dc9-4ac2-a793-5785b52ec377"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7abf047b-2682-4afd-bd5d-82faf60bab91"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ViewChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1d2155c-ea4e-4fad-8789-8ed50a29cbff"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47ec2df9-0e15-4423-bd40-de785a92b216"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AnyKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // PlayerInputAction
            m_PlayerInputAction = asset.FindActionMap("PlayerInputAction", throwIfNotFound: true);
            m_PlayerInputAction_Move = m_PlayerInputAction.FindAction("Move", throwIfNotFound: true);
            m_PlayerInputAction_Look = m_PlayerInputAction.FindAction("Look", throwIfNotFound: true);
            m_PlayerInputAction_Fire = m_PlayerInputAction.FindAction("Fire", throwIfNotFound: true);
            m_PlayerInputAction_Reload = m_PlayerInputAction.FindAction("Reload", throwIfNotFound: true);
            m_PlayerInputAction_ViewChange = m_PlayerInputAction.FindAction("ViewChange", throwIfNotFound: true);
            m_PlayerInputAction_AnyKey = m_PlayerInputAction.FindAction("AnyKey", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerInputAction
        private readonly InputActionMap m_PlayerInputAction;
        private IPlayerInputActionActions m_PlayerInputActionActionsCallbackInterface;
        private readonly InputAction m_PlayerInputAction_Move;
        private readonly InputAction m_PlayerInputAction_Look;
        private readonly InputAction m_PlayerInputAction_Fire;
        private readonly InputAction m_PlayerInputAction_Reload;
        private readonly InputAction m_PlayerInputAction_ViewChange;
        private readonly InputAction m_PlayerInputAction_AnyKey;
        public struct PlayerInputActionActions
        {
            private @PlayerInput m_Wrapper;
            public PlayerInputActionActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_PlayerInputAction_Move;
            public InputAction @Look => m_Wrapper.m_PlayerInputAction_Look;
            public InputAction @Fire => m_Wrapper.m_PlayerInputAction_Fire;
            public InputAction @Reload => m_Wrapper.m_PlayerInputAction_Reload;
            public InputAction @ViewChange => m_Wrapper.m_PlayerInputAction_ViewChange;
            public InputAction @AnyKey => m_Wrapper.m_PlayerInputAction_AnyKey;
            public InputActionMap Get() { return m_Wrapper.m_PlayerInputAction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerInputActionActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerInputActionActions instance)
            {
                if (m_Wrapper.m_PlayerInputActionActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnMove;
                    @Look.started -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnLook;
                    @Fire.started -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnFire;
                    @Fire.performed -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnFire;
                    @Fire.canceled -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnFire;
                    @Reload.started -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnReload;
                    @Reload.performed -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnReload;
                    @Reload.canceled -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnReload;
                    @ViewChange.started -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnViewChange;
                    @ViewChange.performed -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnViewChange;
                    @ViewChange.canceled -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnViewChange;
                    @AnyKey.started -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnAnyKey;
                    @AnyKey.performed -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnAnyKey;
                    @AnyKey.canceled -= m_Wrapper.m_PlayerInputActionActionsCallbackInterface.OnAnyKey;
                }
                m_Wrapper.m_PlayerInputActionActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                    @Fire.started += instance.OnFire;
                    @Fire.performed += instance.OnFire;
                    @Fire.canceled += instance.OnFire;
                    @Reload.started += instance.OnReload;
                    @Reload.performed += instance.OnReload;
                    @Reload.canceled += instance.OnReload;
                    @ViewChange.started += instance.OnViewChange;
                    @ViewChange.performed += instance.OnViewChange;
                    @ViewChange.canceled += instance.OnViewChange;
                    @AnyKey.started += instance.OnAnyKey;
                    @AnyKey.performed += instance.OnAnyKey;
                    @AnyKey.canceled += instance.OnAnyKey;
                }
            }
        }
        public PlayerInputActionActions @PlayerInputAction => new PlayerInputActionActions(this);
        private int m_PCSchemeIndex = -1;
        public InputControlScheme PCScheme
        {
            get
            {
                if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
                return asset.controlSchemes[m_PCSchemeIndex];
            }
        }
        public interface IPlayerInputActionActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnFire(InputAction.CallbackContext context);
            void OnReload(InputAction.CallbackContext context);
            void OnViewChange(InputAction.CallbackContext context);
            void OnAnyKey(InputAction.CallbackContext context);
        }
    }
}
